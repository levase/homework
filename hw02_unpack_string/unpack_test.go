package hw02unpackstring

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestUnpack(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{input: "a4bc2d5e", expected: "aaaabccddddde"},
		{input: "abccd", expected: "abccd"},
		{input: "", expected: ""},
		{input: "aaa0b", expected: "aab"},
		{input: "üôÉ0", expected: ""},
		{input: "aa—Ñ0b", expected: "aab"},
		// uncomment if task with asterisk completed
		{input: `qwe\4\5`, expected: `qwe45`},
		{input: `qwe\45`, expected: `qwe44444`},
		{input: `qwe\\5`, expected: `qwe\\\\\`},
		{input: `qwe\\\3`, expected: `qwe\3`},
	}

	for _, tc := range tests {
		t.Run(tc.input, func(t *testing.T) {
			result, err := Unpack(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, result)
		})
	}
}

func TestUnpackInvalidString(t *testing.T) {
	invalidStrings := []string{"3abc", "45", "aaa10b"}
	for _, tc := range invalidStrings {
		t.Run(tc, func(t *testing.T) {
			_, err := Unpack(tc)
			require.Truef(t, errors.Is(err, ErrInvalidString), "actual error %q", err)
		})
	}
}

func TestUnpackExtended(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–æ–¥–∏–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª",
			input:    "a5",
			expected: "aaaaa",
		},
		{
			name:     "–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
			input:    "a",
			expected: "a",
		},
		{
			name:     "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏",
			input:    "a2b3c1",
			expected: "aabbbc",
		},
		{
			name:     "–Ω—É–ª–µ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ",
			input:    "a0bc",
			expected: "bc",
		},
		{
			name:     "–Ω—É–ª–µ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ",
			input:    "ab0c",
			expected: "ac",
		},
		{
			name:     "–Ω—É–ª–µ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ",
			input:    "abc0",
			expected: "ab",
		},
		{
			name:     "–Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω—É–ª–µ–≤—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
			input:    "a0b0c0",
			expected: "",
		},
		{
			name:     "unicode —Å–∏–º–≤–æ–ª—ã —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏",
			input:    "üôÇ2‰∏ñ3Áïå1",
			expected: "üôÇüôÇ‰∏ñ‰∏ñ‰∏ñÁïå",
		},
		{
			name:     "—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞",
			input:    `a\2b`,
			expected: "a2b",
		},
		{
			name:     "—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à",
			input:    `a\\b`,
			expected: `a\b`,
		},
		{
			name:     "—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–µ—à —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º",
			input:    `a\\3b`,
			expected: `a\\\b`,
		},
		{
			name:     "–Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
			input:    `a\2\3\4b`,
			expected: "a234b",
		},
		{
			name:     "—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º",
			input:    `a\23`,
			expected: "a222",
		},
		{
			name:     "—Å–ª–æ–∂–Ω–∞—è escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
			input:    `a\\\2b`,
			expected: `a\2b`,
		},
		{
			name:     "—Å–º–µ—à–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã",
			input:    `a\2b3c\4`,
			expected: "a2bbbc4",
		},
		{
			name:     "–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ",
			input:    `a\`,
			expected: "a", // –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			result, err := Unpack(tc.input)
			if tc.name == "–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ" {
				require.Error(t, err)
				require.True(t, errors.Is(err, ErrInvalidString))
			} else {
				require.NoError(t, err)
				require.Equal(t, tc.expected, result)
			}
		})
	}
}

func TestUnpackBoundaryCases(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ",
			input:    `\abc`,
			expected: "abc",
		},
		{
			name:     "—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞",
			input:    `a\bc`,
			expected: "abc",
		},
		{
			name:     "–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö escape —Å–∏–º–≤–æ–ª–æ–≤",
			input:    `a\\\\b`,
			expected: `a\\b`,
		},
		{
			name:     "–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "—Ç–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
			input:    `\a\b\c`,
			expected: "abc",
		},
		{
			name:     "—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω—É–ª–µ–≤—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º",
			input:    `a\0b`,
			expected: "a0b",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			result, err := Unpack(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, result)
		})
	}
}
